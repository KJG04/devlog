{"pageProps":{"recentlyPost":[{"frontMatter":{"title":"Nextjs 블로그에 react-medium-image-zoom 적용하기","tags":["react-medium-image-zoom","javascript","typescript","nextjs"],"series":"Next.js 블로그 개발","published":true,"date":"Mon Oct 17 2022 19:58:32 GMT+0900 (대한민국 표준시)","description":"Next.js 블로그를 개발하면서 react-medium-image-zoom 적용하게된 이야기와 Trouble Shooting 정리","thumbnail":"/img/thumbnail-2022-10-17.jpg"},"body":"## react-medium-image-zoom\n\n> The original medium.com-inspired image zooming library for React.\n\nReact를 위한 medium 같은 이미지 Zooming 라이브러리이다.\n\n<br />\n\n개인적으로 medium을 사용하며 이미지를 클릭 시 확대가 되는 방식이 마음에 들었었다.\n\n개발 블로그의 경우 사진 자료가 많이 사용되는데 이때 클릭 시 확대되면 편리할 거 같아 [react-medium-image-zoom](https://github.com/rpearce/react-medium-image-zoom)을 사용하기로 마음먹었다.\n\n### 설치\n\n```ts\nyarn add react-medium-image-zoom\n```\n\n```ts\nnpm install --save react-medium-image-zoom\n```\n\n## 적용\n\n지금 Next.js로 개발중인 블로그는 `remark`, `rehype` 그리고 `next-mdx-remote`을 사용해 게시물을 생성하고 있다.\n\n`next-mdx-remote`에서 `components` 옵션을 통해 컴포넌트를 사용자 마음대로 바꿀 수 있기 때문에 그걸 사용하기로 했다.\n\n우선 `Img` 컴포넌트를 생성한다\n\n```tsx\n// src/components/Img.tsx\n\nimport { HTMLProps } from 'react';\n\nconst Img = (props: HTMLProps<HTMLImageElement>) => {\n  const { src, ...rest } = props;\n\n  if (!src) {\n    return <p>이미지를 사용할 수 없습니다.</p>;\n  }\n\n  return (\n    <Image\n      {...rest}\n      src={src}\n      alt={src}\n      crossOrigin=\"anonymous\"\n      placeholder=\"empty\"\n      objectFit=\"contain\"\n    />\n  );\n};\n\nexport default Img;\n```\n\n그리고 생성한 `Img` 컴포넌트를 `MDXRemote`의 components에 넣어준다.\n\n```tsx\n// src/components/Markdown.tsx\n\nimport { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote';\nimport { FC } from 'react';\nimport { Img } from 'src/components/Img';\n\ninterface PropsType {\n  content: MDXRemoteSerializeResult;\n}\n\nconst Markdown: FC<PropsType> = (props) => {\n  const { content } = props;\n  const components = { img: Img };\n\n  return <MDXRemote {...content} components={components} />;\n};\n\nexport default Markdown;\n```\n\n이미지가 들어있는 mdx 파일을 `Markdown` 컴포넌트를 통해 렌더링하면 이미지가 렌더링 되는 것을 확인할 수 있다.\n\n<br />\n\n이제 `react-medium-image-zoom`을 적용해보자.\n\n```tsx\n// src/components/Img.tsx\n\nimport { HTMLProps } from 'react';\nimport Zoom from 'react-medium-image-zoom';\n\nconst Img = (props: HTMLProps<HTMLImageElement>) => {\n  const { src, ...rest } = props;\n\n  if (!src) {\n    return <p>이미지를 사용할 수 없습니다.</p>;\n  }\n\n  return (\n    <Zoom>\n      <Image\n        {...rest}\n        src={src}\n        alt={src}\n        crossOrigin=\"anonymous\"\n        placeholder=\"empty\"\n        objectFit=\"contain\"\n      />\n    </Zoom>\n  );\n};\n\nexport default Img;\n```\n\n적용 방법은 굉장히 쉽다. 위 코드처럼 이미지를 `Zoom` 컴포넌트로 감싸면 된다.\n그리고 결과물을 확인해보면,\n\n![img](/img/screenshot-2022-10-18-AM-9.09.31.png)\n\nError: Hydration failed because the initial UI does not match what was rendered on the server.\n\n위와 같은 오류가 발생한다...\n\n## 문제 해결\n\n나는 이 오류로 구글링을 꽤 오랫동안 했다. 하지만 해결 방법은 간단했다.\n\nNext.js의 기능 중 하나인 [Dynamic Import](https://nextjs.org/docs/advanced-features/dynamic-import)를 사용하면 된다.\n\n```tsx\n// src/components/Img.tsx\n\nimport { HTMLProps } from 'react';\nimport dynamic from 'next/dynamic';\n\nconst Zoom = dynamic(() => import('react-medium-image-zoom'), { ssr: false });\n\nconst Img = (props: HTMLProps<HTMLImageElement>) => {\n  const { src, ...rest } = props;\n\n  if (!src) {\n    return <p>이미지를 사용할 수 없습니다.</p>;\n  }\n\n  return (\n    <Zoom>\n      <Image\n        {...rest}\n        src={src}\n        alt={src}\n        crossOrigin=\"anonymous\"\n        placeholder=\"empty\"\n        objectFit=\"contain\"\n      />\n    </Zoom>\n  );\n};\n\nexport default Img;\n```\n\n`Img` 컴포넌트를 위와 같은 코드로 수정 후 결과물을 확인하면 오류가 발생하지 않는 것을 확인할 수 있다.\n\n### 이유는?\n\n나름대로 추측을 해보자면, Zoom 컴포넌트가 자식 img 컴포넌트를 클릭시 확대 되도록하는 기능을 추가하기 위해 dom을 수정하는 과정에서 서버와 클라이언트간 초기 UI가 맞지 않아 생기는 오류인것 같다.\n\n따라서 dynamic import로 서버 렌더링에 포함하지 않으면 해결되는 것이다.\n\n정확한 이유는 코드를 확인해보아야 알 수 있을 것 같다.\n","pathParam":{"date":"2022-10","name":"nextjs-blog에-react-medium-image-zoom-적용하기"}}]},"__N_SSG":true}